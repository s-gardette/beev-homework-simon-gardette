import { MigrationInterface, QueryRunner } from "typeorm";

export class Migrations1755957915104 implements MigrationInterface {
    name = 'Migrations1755957915104'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TYPE "public"."model_type_enum" AS ENUM('BEV', 'ICE')`);
        await queryRunner.query(`CREATE TABLE "model" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "createdBy" character varying(300), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedBy" character varying(300), "id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying(100) NOT NULL, "batteryCapacity" integer NOT NULL, "averageConsumption" double precision NOT NULL, "emissionGCO2" double precision NOT NULL, "Type" "public"."model_type_enum" NOT NULL DEFAULT 'BEV', "brandId" uuid, CONSTRAINT "PK_d6df271bba301d5cc79462912a4" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "brand" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "createdBy" character varying(300), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedBy" character varying(300), "id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying(100) NOT NULL, CONSTRAINT "PK_a5d20765ddd942eb5de4eee2d7f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "vehicle" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "createdBy" character varying(300), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedBy" character varying(300), "id" uuid NOT NULL DEFAULT uuid_generate_v4(), "externalId" uuid, "name" character varying(200) NOT NULL, "brandId" uuid, "modelId" uuid, CONSTRAINT "PK_187fa17ba39d367e5604b3d1ec9" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."vehicle_status_status_enum" AS ENUM('in_use', 'available', 'charging')`);
        await queryRunner.query(`CREATE TABLE "vehicle_status" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "createdBy" character varying(300), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedBy" character varying(300), "id" SERIAL NOT NULL, "currentChargeLevel" integer NOT NULL, "status" "public"."vehicle_status_status_enum" NOT NULL DEFAULT 'available', "vehicleId" uuid, CONSTRAINT "REL_a028c16c50c35411192a39c0e7" UNIQUE ("vehicleId"), CONSTRAINT "PK_46fb0d302477906d3beec8ccacd" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "model" ADD CONSTRAINT "FK_7996700d600159cdf20dc0d0816" FOREIGN KEY ("brandId") REFERENCES "brand"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "vehicle" ADD CONSTRAINT "FK_42dbf3ac91a7ef82780fed6f407" FOREIGN KEY ("brandId") REFERENCES "brand"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "vehicle" ADD CONSTRAINT "FK_4669569879f1d55e4f2a98f8e36" FOREIGN KEY ("modelId") REFERENCES "model"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "vehicle_status" ADD CONSTRAINT "FK_a028c16c50c35411192a39c0e7f" FOREIGN KEY ("vehicleId") REFERENCES "vehicle"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`CREATE VIEW "brand_analytics_view" AS SELECT "brand"."id" AS "brandId", "brand"."name" AS "brandName", AVG("vehicleStatus"."currentChargeLevel") AS "averageCharge", AVG("model"."averageConsumption") AS "averageConsumption", AVG("model"."batteryCapacity") AS "averageBatteryCapacity", COUNT("vehicle"."id") AS "vehiclesCount" FROM "vehicle" "vehicle" LEFT JOIN "vehicle_status" "vehicleStatus" ON "vehicleStatus"."vehicleId" = "vehicle"."id"  LEFT JOIN "model" "model" ON "vehicle"."modelId" = "model"."id"  LEFT JOIN "brand" "brand" ON "vehicle"."brandId" = "brand"."id" GROUP BY "brand"."id", "brand"."name"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","brand_analytics_view","SELECT \"brand\".\"id\" AS \"brandId\", \"brand\".\"name\" AS \"brandName\", AVG(\"vehicleStatus\".\"currentChargeLevel\") AS \"averageCharge\", AVG(\"model\".\"averageConsumption\") AS \"averageConsumption\", AVG(\"model\".\"batteryCapacity\") AS \"averageBatteryCapacity\", COUNT(\"vehicle\".\"id\") AS \"vehiclesCount\" FROM \"vehicle\" \"vehicle\" LEFT JOIN \"vehicle_status\" \"vehicleStatus\" ON \"vehicleStatus\".\"vehicleId\" = \"vehicle\".\"id\"  LEFT JOIN \"model\" \"model\" ON \"vehicle\".\"modelId\" = \"model\".\"id\"  LEFT JOIN \"brand\" \"brand\" ON \"vehicle\".\"brandId\" = \"brand\".\"id\" GROUP BY \"brand\".\"id\", \"brand\".\"name\""]);
        await queryRunner.query(`CREATE VIEW "model_efficiency_view" AS SELECT "model"."id" AS "modelId", "model"."name" AS "modelName", AVG("model"."averageConsumption") AS "avgConsumption", AVG("model"."batteryCapacity") AS "avgBatteryCapacity", COUNT("vehicle"."id") AS "vehiclesCount" FROM "vehicle" "vehicle" LEFT JOIN "model" "model" ON "vehicle"."modelId" = "model"."id" GROUP BY "model"."id", "model"."name"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","model_efficiency_view","SELECT \"model\".\"id\" AS \"modelId\", \"model\".\"name\" AS \"modelName\", AVG(\"model\".\"averageConsumption\") AS \"avgConsumption\", AVG(\"model\".\"batteryCapacity\") AS \"avgBatteryCapacity\", COUNT(\"vehicle\".\"id\") AS \"vehiclesCount\" FROM \"vehicle\" \"vehicle\" LEFT JOIN \"model\" \"model\" ON \"vehicle\".\"modelId\" = \"model\".\"id\" GROUP BY \"model\".\"id\", \"model\".\"name\""]);
        await queryRunner.query(`CREATE VIEW "emissions_by_drive_type_view" AS SELECT "model"."Type" AS "type", AVG("model"."emissionGCO2") AS "avgEmission", COUNT("vehicle"."id") AS "vehiclesCount" FROM "vehicle" "vehicle" LEFT JOIN "model" "model" ON "vehicle"."modelId" = "model"."id" GROUP BY "model"."Type"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","emissions_by_drive_type_view","SELECT \"model\".\"Type\" AS \"type\", AVG(\"model\".\"emissionGCO2\") AS \"avgEmission\", COUNT(\"vehicle\".\"id\") AS \"vehiclesCount\" FROM \"vehicle\" \"vehicle\" LEFT JOIN \"model\" \"model\" ON \"vehicle\".\"modelId\" = \"model\".\"id\" GROUP BY \"model\".\"Type\""]);
        await queryRunner.query(`CREATE VIEW "fleet_composition_view" AS SELECT "model"."Type" AS "type", COUNT("vehicle"."id") AS "count", (COUNT("vehicle"."id") * 100.0) / (SELECT COUNT(*) FROM vehicle) AS "percentage" FROM "vehicle" "vehicle" LEFT JOIN "model" "model" ON "vehicle"."modelId" = "model"."id" GROUP BY "model"."Type"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","fleet_composition_view","SELECT \"model\".\"Type\" AS \"type\", COUNT(\"vehicle\".\"id\") AS \"count\", (COUNT(\"vehicle\".\"id\") * 100.0) / (SELECT COUNT(*) FROM vehicle) AS \"percentage\" FROM \"vehicle\" \"vehicle\" LEFT JOIN \"model\" \"model\" ON \"vehicle\".\"modelId\" = \"model\".\"id\" GROUP BY \"model\".\"Type\""]);
        await queryRunner.query(`CREATE VIEW "fleet_operational_view" AS SELECT COUNT("vehicle"."id") AS "totalVehicles", SUM(CASE WHEN "vehicleStatus"."status" = 'available' THEN 1 ELSE 0 END) AS "availableCount", SUM(CASE WHEN "vehicleStatus"."status" = 'charging' THEN 1 ELSE 0 END) AS "chargingCount", SUM(CASE WHEN "vehicleStatus"."status" = 'in_use' THEN 1 ELSE 0 END) AS "inUseCount", (SUM(CASE WHEN "vehicleStatus"."status" = 'available' THEN 1 ELSE 0 END) * 100.0) / NULLIF(COUNT("vehicle"."id"), 0) AS "availabilityRate" FROM "vehicle" "vehicle" LEFT JOIN "vehicle_status" "vehicleStatus" ON "vehicleStatus"."vehicleId" = "vehicle"."id"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","fleet_operational_view","SELECT COUNT(\"vehicle\".\"id\") AS \"totalVehicles\", SUM(CASE WHEN \"vehicleStatus\".\"status\" = 'available' THEN 1 ELSE 0 END) AS \"availableCount\", SUM(CASE WHEN \"vehicleStatus\".\"status\" = 'charging' THEN 1 ELSE 0 END) AS \"chargingCount\", SUM(CASE WHEN \"vehicleStatus\".\"status\" = 'in_use' THEN 1 ELSE 0 END) AS \"inUseCount\", (SUM(CASE WHEN \"vehicleStatus\".\"status\" = 'available' THEN 1 ELSE 0 END) * 100.0) / NULLIF(COUNT(\"vehicle\".\"id\"), 0) AS \"availabilityRate\" FROM \"vehicle\" \"vehicle\" LEFT JOIN \"vehicle_status\" \"vehicleStatus\" ON \"vehicleStatus\".\"vehicleId\" = \"vehicle\".\"id\""]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","fleet_operational_view","public"]);
        await queryRunner.query(`DROP VIEW "fleet_operational_view"`);
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","fleet_composition_view","public"]);
        await queryRunner.query(`DROP VIEW "fleet_composition_view"`);
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","emissions_by_drive_type_view","public"]);
        await queryRunner.query(`DROP VIEW "emissions_by_drive_type_view"`);
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","model_efficiency_view","public"]);
        await queryRunner.query(`DROP VIEW "model_efficiency_view"`);
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","brand_analytics_view","public"]);
        await queryRunner.query(`DROP VIEW "brand_analytics_view"`);
        await queryRunner.query(`ALTER TABLE "vehicle_status" DROP CONSTRAINT "FK_a028c16c50c35411192a39c0e7f"`);
        await queryRunner.query(`ALTER TABLE "vehicle" DROP CONSTRAINT "FK_4669569879f1d55e4f2a98f8e36"`);
        await queryRunner.query(`ALTER TABLE "vehicle" DROP CONSTRAINT "FK_42dbf3ac91a7ef82780fed6f407"`);
        await queryRunner.query(`ALTER TABLE "model" DROP CONSTRAINT "FK_7996700d600159cdf20dc0d0816"`);
        await queryRunner.query(`DROP TABLE "vehicle_status"`);
        await queryRunner.query(`DROP TYPE "public"."vehicle_status_status_enum"`);
        await queryRunner.query(`DROP TABLE "vehicle"`);
        await queryRunner.query(`DROP TABLE "brand"`);
        await queryRunner.query(`DROP TABLE "model"`);
        await queryRunner.query(`DROP TYPE "public"."model_type_enum"`);
    }

}
