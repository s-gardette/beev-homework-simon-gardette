services:
    proxy:
        image: caddy:latest
        restart: always
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./proxy/Caddyfile:/etc/caddy/Caddyfile
            - caddy_data:/data
            - caddy_config:/config
        networks:
            - beev-network
        environment:
            DOMAIN: ${DOMAIN-beev.localhost}
        depends_on:
            - frontend
            - backend
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M

    database:
        image: postgres:17.4
        restart: always
        shm_size: 256mb
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_DB: beev
            PGDATA: /var/lib/postgresql/data
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - beev-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
            interval: 10s
            timeout: 5s
            retries: 5
        logging:
            driver: "local"
            options:
                max-size: "10m"
                max-file: "3"
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 1G

    pgadmin:
        image: dpage/pgadmin4
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
            PGADMIN_LISTEN_PORT: 80
        ports:
            - "8001:80"
        networks:
            - beev-network
        depends_on:
            - database
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M

    redis:
        image: redis:alpine
        restart: always
        command: redis-server --save 20 1 --loglevel warning
        ports:
            - "6379:6379"
        networks:
            - beev-network
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
        logging:
            driver: "local"
            options:
                max-size: "10m"
                max-file: "3"
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 256M

    redis-insight:
        image: redislabs/redisinsight:latest
        restart: always
        ports:
            - "8002:5540"
        networks:
            - beev-network
        volumes:
            - redis-insight_data:/db
        depends_on:
            - redis
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M

    backend:
        build:
            context: .
            dockerfile: backend/Dockerfile
        restart: unless-stopped
        networks:
            - beev-network
        environment:
            NODE_ENV: ${NODE_ENV:-production}
            DB_HOST: ${DB_HOST:-database}
            DB_PORT: ${DB_PORT:-5432}
            DB_USER: ${POSTGRES_USER:-postgres}
            DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
            DB_NAME: ${POSTGRES_DB:-beev}
        volumes:
            - ./data:/app/data
        depends_on:
            database:
                condition: service_healthy
            redis:
                condition: service_healthy
        logging:
            driver: "local"
            options:
                max-size: "50m"
                max-file: "10"
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 1G

    frontend:
        build:
            context: .
            dockerfile: frontend/Dockerfile
        restart: unless-stopped
        environment:
            NODE_ENV: ${NODE_ENV:-production}
            DOMAIN: ${DOMAIN:-localhost}
        networks:
            - beev-network
        depends_on:
            - backend
        logging:
            driver: "local"
            options:
                max-size: "10m"
                max-file: "3"
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M

networks:
    beev-network:
        driver: bridge
        name: beev-network

volumes:
    postgres_data:
        name: beev_postgres_data
    pgadmin_data:
        name: beev_pgadmin_data
    redis_data:
        name: beev_redis_data
    redis-insight_data:
        name: beev_redis_insight_data
    caddy_data:
        name: beev_caddy_data
    caddy_config:
        name: beev_caddy_config
